type Pool @entity {
    id: ID!
    name: String!
    access: PoolAccess!
    stableCoin: Bytes!
    owner: Bytes!
    minDeposit: BigInt!
    totalDeposited: BigInt!
    totalBorrowed: BigInt!
    createdAt: BigInt!
    assetsLocked: [Asset!]!
    members: [Bytes!]!
    joins: [Bytes!]
    applications: [LenderApplication!]! @derivedFrom(field: "pool")
}

enum PoolAccess {
    PUBLIC
    PRIVATE
}

type Loan @entity {
    id: ID!
    key: String!
    borrowCeiling: BigInt!
    available: BigInt!
    maturity: BigInt!
    interestRate: BigInt!
    borrower: Bytes!
    pool: Pool!
    asset: Asset!
    createdAt: BigInt!
    isClosed: Boolean!
    transactions: [Transaction!]!
}

type Transaction @entity {
    id: ID!
    from: Bytes!
    to: Bytes!
    amount: BigInt!
    penaltyAmount: BigInt
    createdAt: BigInt!
    type: TransactionType!
}

enum TransactionType {
    BORROW
    REPAY
    LEND
    REDEEM
}

type Asset @entity {
    id: ID!
    hash: String!
    value: BigInt!
    uri: String!
    riskRating: String!
    maturityDate: BigInt!
    owner: Bytes!
    isLocked: Boolean!
    isRedeemed: Boolean!
    uploadedAt: BigInt!
    loanInfo: Loan
}

enum ApplicationStatus {
    NOT_LISTED
    WHITELISTED
    BLACKLISTED
}

type LenderApplication @entity {
    id: ID!
    pool: Pool!
    account: Bytes!
    amount: BigInt!
    status: ApplicationStatus!
    poolOwner: Borrower!
    createdAt: BigInt!
}

type Borrower @entity {
    id: ID!
    status: ApplicationStatus!
    pools: [Pool!]!
    whitelists: [Bytes!]!
}

# voting info
type VotingInfo @entity {
    id: ID!
    locked: BigInt!
}

type Lock @entity {
    id: ID!
    amount: BigInt!
    start: BigInt!
    end: BigInt!
}
